File 'src/triangle.cpp'
Lines executed:100.00% of 11
Creating 'triangle.cpp.gcov'

        -:    0:Source:src/triangle.cpp
        -:    0:Graph:triangle.gcno
        -:    0:Data:triangle.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "triangle.h"
        -:    2:
function _Z8triangleiiiSs called 5 returned 100% blocks executed 100%
        5:    3:const char *triangle(int a, int b, int c, string str) {
        5:    4:    if ((a >= 1 && a <= 200) && (b >= 1 && b <= 200) && (c >= 1 && c <= 200)) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 80% (fallthrough)
branch  9 taken 20%
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
        8:    5:        if ((a + b <= c) || (b + c <= a) || (a + c <= b)) {
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        1:    6:            str = "Not a triangle";
call    0 returned 100%
        3:    7:        } else if ((a == b) && (b == c)) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        1:    8:            str = "Equilateral";
call    0 returned 100%
        2:    9:        } else if ((a == b) || (b == c) || (a == c)) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        1:   10:            str = "Isosceles";
call    0 returned 100%
        -:   11:        } else {
        1:   12:            str = "Scalene";
call    0 returned 100%
        -:   13:        }
        -:   14:    } else {
        1:   15:        str = "Out of range";
call    0 returned 100%
        -:   16:    }
        5:   17:    return str.c_str();
call    0 returned 100%
        -:   18:}

File 'src/triangle.cpp'
Lines executed:100.00% of 11
Branches executed:100.00% of 28
Taken at least once:78.57% of 28
Calls executed:100.00% of 6
Creating 'triangle.cpp.gcov'
        -:    0:Source:src/triangle.cpp
        -:    0:Graph:triangle.gcno
        -:    0:Data:triangle.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:#include "triangle.h"
        -:    2:
function _Z8triangleiiiSs called 13 returned 100% blocks executed 100%
       13:    3:const char *triangle(int a, int b, int c, string str) {
       13:    4:    if ((a >= 1 && a <= 200) && (b >= 1 && b <= 200) && (c >= 1 && c <= 200)) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 85% (fallthrough)
branch  9 taken 15%
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
       22:    5:        if ((a + b <= c) || (b + c <= a) || (a + c <= b)) {
branch  0 taken 82% (fallthrough)
branch  1 taken 18%
branch  2 taken 89% (fallthrough)
branch  3 taken 11%
branch  4 taken 13% (fallthrough)
branch  5 taken 88%
        4:    6:            str = "Not a triangle";
call    0 returned 100%
        7:    7:        } else if ((a == b) && (b == c)) {
branch  0 taken 57% (fallthrough)
branch  1 taken 43%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        2:    8:            str = "Equilateral";
call    0 returned 100%
        5:    9:        } else if ((a == b) || (b == c) || (a == c)) {
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
branch  2 taken 67% (fallthrough)
branch  3 taken 33%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        3:   10:            str = "Isosceles";
call    0 returned 100%
        -:   11:        } else {
        2:   12:            str = "Scalene";
call    0 returned 100%
        -:   13:        }
        -:   14:    } else {
        2:   15:        str = "Out of range";
call    0 returned 100%
        -:   16:    }
       13:   17:    return str.c_str();
call    0 returned 100%
        -:   18:}

File 'src/commission.cpp'
Lines executed:100.00% of 19
Branches executed:100.00% of 18
Taken at least once:100.00% of 18
No calls
Creating 'commission.cpp.gcov'
        -:    0:Source:src/commission.cpp
        -:    0:Graph:commission.gcno
        -:    0:Data:commission.gcda
        -:    0:Runs:7
        -:    0:Programs:7
        -:    1:#include "commission.h"
        -:    2:
function _Z10commissioniii called 157 returned 100% blocks executed 100%
      157:    3:float commission(int lock, int stock, int barrel)
        -:    4:{
        -:    5:    float sales;
        -:    6:    float commission;
      157:    7:    if (lock == -1)
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
       19:    8:        return 0.0f;
      138:    9:    else if (lock < 1 || lock > 70)
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
       23:   10:        return -1.0f;
      115:   11:    if (stock < 1 || stock > 80)
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
       23:   12:        return -1.0f;
       92:   13:    if (barrel < 1 || barrel > 90)
branch  0 taken 79% (fallthrough)
branch  1 taken 21%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
       23:   14:        return -1.0f;
       69:   15:    sales = lock * 45.0f + stock * 30.0f + barrel * 25.0f;
       69:   16:    if (sales < 1000)
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
       19:   17:        commission = sales * 0.1f;
       50:   18:    else if (sales < 1800) {
branch  0 taken 38% (fallthrough)
branch  1 taken 62%
       19:   19:        commission = 1000.0 * 0.1f;
       19:   20:        commission += (sales - 1000.0f) * 0.15f;
        -:   21:    }
        -:   22:    else {
       31:   23:        commission = 1000.0 * 0.1f;
       31:   24:        commission += 800.0 * 0.15f;
       31:   25:        commission += (sales - 1800.0f) * 0.2f;
        -:   26:    }
       69:   27:    return commission;
        -:   28:}

File 'src/nextdate.cpp'
Lines executed:100.00% of 72
Branches executed:100.00% of 84
Taken at least once:89.29% of 84
Calls executed:75.00% of 28
Creating 'nextdate.cpp.gcov'
        -:    0:Source:src/nextdate.cpp
        -:    0:Graph:nextdate.gcno
        -:    0:Data:nextdate.gcda
        -:    0:Runs:5
        -:    0:Programs:5
        -:    1:#include "nextdate.h"
        -:    2:#include <iostream>
        -:    3:
function _Z13format_stringiiiRSs called 160 returned 100% blocks executed 57%
      160:    4:void format_string(int year, int month, int day, string &str) {
      160:    5:    str = to_string(year) + "/" + to_string(month) + "/" + to_string(day);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
branch 17 taken 100% (fallthrough)
branch 18 taken 0% (throw)
call   19 returned 100%
branch 20 taken 100% (fallthrough)
branch 21 taken 0% (throw)
call   22 returned 100%
call   23 returned 100%
call   24 returned 100%
call   25 returned 100%
call   26 returned 100%
call   27 returned 100%
call   28 returned 100%
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
      160:    6:}
        -:    7:
function _Z10IsLeapYeari called 182 returned 100% blocks executed 100%
      182:    8:bool IsLeapYear(int year) {
      182:    9:    if (year % 400 == 0) {
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
       40:   10:        return true;
      142:   11:    } else if ((year % 4 == 0) && (year % 100 != 0)) {
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
branch  2 taken 98% (fallthrough)
branch  3 taken 2%
       60:   12:        return true;
        -:   13:    } else {
       82:   14:        return false;
        -:   15:    }
        -:   16:}
function _Z12IsSolarMonthi called 130 returned 100% blocks executed 100%
      130:   17:bool IsSolarMonth(int month) {
      130:   18:    if (month <= 7) {
branch  0 taken 48% (fallthrough)
branch  1 taken 52%
       62:   19:        if (month % 2 == 0)
branch  0 taken 53% (fallthrough)
branch  1 taken 47%
       33:   20:            return false;
        -:   21:        else
       29:   22:            return true;
        -:   23:    } else {
       68:   24:        if (month % 2 == 0)
branch  0 taken 57% (fallthrough)
branch  1 taken 43%
       39:   25:            return true;
        -:   26:        else
       29:   27:            return false;
        -:   28:    }
        -:   29:}
function _Z8nextdateiiiSs called 240 returned 100% blocks executed 100%
      240:   30:const char *nextdate(int year, int month, int day, string str) {
      240:   31:    if (year < 1812 || year > 2012)
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
       10:   32:        return "Invalid date range";
      230:   33:    if (month > 12 || month < 1)
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
       13:   34:        return "Invalid date range";
      217:   35:    if (day > 31 || day < 1)
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
       35:   36:        return "Invalid date range";
      182:   37:    if (IsLeapYear(year)) {
call    0 returned 100%
branch  1 taken 55% (fallthrough)
branch  2 taken 45%
      100:   38:        if (month == 12 && day == 31)
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
branch  2 taken 64% (fallthrough)
branch  3 taken 36%
       14:   39:            year += 1;
      100:   40:        if (month == 2) {
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
       30:   41:            if (day == 29) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
       10:   42:                month += 1;
       10:   43:                day = 1;
       20:   44:            } else if (day < 29) {
branch  0 taken 70% (fallthrough)
branch  1 taken 30%
       14:   45:                day += 1;
        -:   46:            } else {
        6:   47:                return "Invalid input date";
        -:   48:            }
       70:   49:        } else if (IsSolarMonth(month)) {
call    0 returned 100%
branch  1 taken 54% (fallthrough)
branch  2 taken 46%
       38:   50:            if (day == 31) {
branch  0 taken 61% (fallthrough)
branch  1 taken 39%
       23:   51:                if (month == 12)
branch  0 taken 61% (fallthrough)
branch  1 taken 39%
       14:   52:                    month = 1;
        -:   53:                else
        9:   54:                    month += 1;
       23:   55:                day = 1;
        -:   56:            } else {
       15:   57:                day += 1;
        -:   58:            }
        -:   59:        } else {
       32:   60:            if (day == 30) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
       16:   61:                month += 1;
       16:   62:                day = 1;
       16:   63:            } else if (day < 30) {
branch  0 taken 88% (fallthrough)
branch  1 taken 13%
       14:   64:                day += 1;
        -:   65:            } else {
        2:   66:                return "Invalid input date";
        -:   67:            }
        -:   68:        }
        -:   69:    } else {
       82:   70:        if (month == 12 && day == 31)
branch  0 taken 21% (fallthrough)
branch  1 taken 79%
branch  2 taken 53% (fallthrough)
branch  3 taken 47%
        9:   71:            year += 1;
       82:   72:        if (month == 2) {
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       22:   73:            if (day == 28) {
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
        8:   74:                month += 1;
        8:   75:                day = 1;
       14:   76:            } else if (day < 28) {
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        2:   77:                day += 1;
        -:   78:            } else {
       12:   79:                return "Invalid input date";
        -:   80:            }
       60:   81:        } else if (IsSolarMonth(month)) {
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
       30:   82:            if (day == 31) {
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
       18:   83:                if (month == 12)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        9:   84:                    month = 1;
        -:   85:                else
        9:   86:                    month += 1;
       18:   87:                day = 1;
        -:   88:            } else {
       12:   89:                day += 1;
        -:   90:            }
        -:   91:        } else {
       30:   92:            if (day == 30) {
branch  0 taken 53% (fallthrough)
branch  1 taken 47%
       16:   93:                month += 1;
       16:   94:                day = 1;
       14:   95:            } else if (day < 30) {
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
       12:   96:                day += 1;
        -:   97:            } else {
        2:   98:                return "Invalid input date";
        -:   99:            }
        -:  100:        }
        -:  101:    }
      160:  102:    format_string(year, month, day, str);
call    0 returned 100%
      160:  103:    return str.c_str();
call    0 returned 100%
function _GLOBAL__sub_I__Z13format_stringiiiRSs called 5 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 5 returned 100% blocks executed 100%
       15:  104:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
